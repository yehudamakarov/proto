// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

var authServiceLoginStreamDesc = &grpc.StreamDesc{
	StreamName: "Login",
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var authServiceLogoutStreamDesc = &grpc.StreamDesc{
	StreamName: "Logout",
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceService is the service API for AuthService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAuthServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AuthServiceService struct {
	Login  func(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout func(context.Context, *LogoutRequest) (*LogoutResponse, error)
}

func (s *AuthServiceService) login(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AuthServiceService) logout(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAuthServiceService registers a service implementation with a gRPC server.
func RegisterAuthServiceService(s grpc.ServiceRegistrar, srv *AuthServiceService) {
	srvCopy := *srv
	if srvCopy.Login == nil {
		srvCopy.Login = func(context.Context, *LoginRequest) (*LoginResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
		}
	}
	if srvCopy.Logout == nil {
		srvCopy.Logout = func(context.Context, *LogoutRequest) (*LogoutResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "auth.AuthService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Login",
				Handler:    srvCopy.login,
			},
			{
				MethodName: "Logout",
				Handler:    srvCopy.logout,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "auth/auth.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAuthServiceService creates a new AuthServiceService containing the
// implemented methods of the AuthService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAuthServiceService(s interface{}) *AuthServiceService {
	ns := &AuthServiceService{}
	if h, ok := s.(interface {
		Login(context.Context, *LoginRequest) (*LoginResponse, error)
	}); ok {
		ns.Login = h.Login
	}
	if h, ok := s.(interface {
		Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	}); ok {
		ns.Logout = h.Logout
	}
	return ns
}

// UnstableAuthServiceService is the service API for AuthService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAuthServiceService interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
}
